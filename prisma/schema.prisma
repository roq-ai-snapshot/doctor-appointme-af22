generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model admin {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String       @db.Uuid
  clinic_owner_id String       @db.Uuid
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  clinic_owner    clinic_owner @relation(fields: [clinic_owner_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            user         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model appointment {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  patient_id       String   @db.Uuid
  doctor_id        String   @db.Uuid
  appointment_time DateTime @db.Timestamp(6)
  created_at       DateTime @default(now()) @db.Timestamp(6)
  updated_at       DateTime @default(now()) @db.Timestamp(6)
  doctor           doctor   @relation(fields: [doctor_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  patient          patient  @relation(fields: [patient_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model clinic_owner {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String   @db.Uuid
  name       String   @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  admin      admin[]
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  doctor     doctor[]
}

model doctor {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clinic_owner_id String?       @db.Uuid
  specialization  String?       @db.VarChar(255)
  availability    String?       @db.VarChar(255)
  description     String?       @db.VarChar(255)
  image           String?       @db.VarChar(255)
  name            String        @db.VarChar(255)
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @default(now()) @db.Timestamp(6)
  user_id         String        @db.Uuid
  tenant_id       String        @db.VarChar(255)
  appointment     appointment[]
  clinic_owner    clinic_owner? @relation(fields: [clinic_owner_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            user          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model patient {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String        @db.Uuid
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  appointment appointment[]
  user        user          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  admin        admin[]
  clinic_owner clinic_owner[]
  doctor       doctor[]
  patient      patient[]
}
